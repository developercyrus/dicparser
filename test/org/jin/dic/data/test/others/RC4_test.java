/*****************************************************************************
 * 
 * @(#)RC4_test.java  2009/03
 *
 *  Copyright (C) 2009  Tim Bron<jinxingquan@gmail.com>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 *****************************************************************************/
package org.jin.dic.data.test.others;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.jin.util.BytesUtil;
import org.jin.util.RC4Engine;


public class RC4_test {

  /**
   * @param args
   * @throws Exception
   */
  public static void main(String[] args) throws Exception{

    String keyString = "xajin";
    String data = "This is the data(ÖÐÎÄ).";

    Cipher cipher = null;
    SecretKey key = null;

    key = new SecretKeySpec(keyString.getBytes(), "RC4");
    cipher = Cipher.getInstance("RC4");
    cipher.init(Cipher.DECRYPT_MODE, key);

    byte[] encoded = cipher.doFinal(data.getBytes());
    byte[] decoded = cipher.doFinal(encoded);

    System.out.println(new String(encoded));
    System.out.println(new String(decoded));

    byte[] f = data.getBytes();
    RC4Engine a = new RC4Engine();
    a.init(keyString.getBytes());
    a.processBytes(f);

    System.out.println(new String(f));
    String tests
    BytesUtil.print(BytesUtil.revert(tests));
    System.out.println(BytesUtil.convert(BytesUtil.revert(tests)));
    System.out.println(BytesUtil.convert(BytesUtil.revert(tests)).equals(tests));
  }

}
